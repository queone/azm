#!/usr/bin/env bash
# build

set -euo pipefail  # Fail immediately on any error
Gre='\e[1;32m' Red='\e[1;31m' Mag='\e[1;35m' Yel='\e[1;33m' Blu='\e[1;34m' Rst='\e[0m'

Prg=`head -1 go.mod | awk -F'/' '{print $NF}' | awk '{print $NF}'`
case "$OSTYPE" in
    "linux-gnu"* ) printf "==> Linux\n" && BIN=$GOPATH/bin/${Prg} ;;
    "darwin"* )    printf "==> macOS\n" && BIN=$GOPATH/bin/${Prg} ;;
    "msys"* )      printf "==> Windows with GitBASH\n" && BIN=$GOPATH/bin/${Prg}.exe ;;
    * )            printf "==> Unknown OS '$OSTYPE'. Aborting.\n" && exit 1 ;;
esac

printf "==> Update go.mod to reflect actual dependencies\ngo mod tidy\n"
go mod tidy
printf "\n==> Format Go code according to standard rules\ngo fmt ./...\n"
go fmt ./...
printf "\n==> Run tests for all packages in the repository\ngo test ./...\n"
go test ./...
printf "\n==> Install static analysis tool for Go\ngo install honnef.co/go/tools/cmd/staticcheck@latest\n"
go install honnef.co/go/tools/cmd/staticcheck@latest
printf "\n==> Analyze Go code for potential issues\nstaticcheck ./...\n"
staticcheck ./...

printf "\n==> Compile required packages\ngo build -o /dev/null ./pkg/maz\n"
go build -o /dev/null ./pkg/maz

MainGo=cmd/azm/main.go
printf "\n==> Build ${Gre}$Prg${Rst}\ngo build -ldflags \"-s -w\" -o $BIN $MainGo\n"
go build -ldflags "-s -w" -o $BIN $MainGo
printf "${Gre}$(ls -l $BIN | awk '{print sprintf("%'"'"'d", $5), $6, $7, $8, $9}')${Rst}\n"
# OPTIONAL: Examples to cross-compile for other OSes/archs:
# GOOS=darwin  GOARCH=arm64       go build -ldflags "-s -w" -o ${Prg}
# GOOS=windows GOARCH=amd64|arm64 go build -ldflags "-s -w" -o ${Prg}.exe
# GOOS=linux   GOARCH=amd64|arm64 go build -ldflags "-s -w" -o ${Prg}

ProgramVersion=$(grep 'prgver.*=' $MainGo || grep 'program_version.*=' $MainGo | cut -d'"' -f2)
printf "\n==> New program version = ${Gre}$ProgramVersion${Rst}\n"

printf "\n==> Warn on any 'replace' in go.mod\n${Red}$(grep replace go.mod)${Rst}\n"
printf "==> Last 5 tags = $(git tag | sort -V | tail -5 | tr '\n' ', ' | sed 's/,/  /g')\n"
CurrentTag=`git tag | sort -V | tail -1`
IFS='.' read -r Major Minor Patch <<< "${CurrentTag#v}"
NextTag="v$Major.$Minor.$((Patch+1))"
if [ "$ProgramVersion" != "${NextTag#v}" ]; then
    printf "==> Program version ${Gre}$ProgramVersion${Rst} and next tag ${Yel}$NextTag${Rst} do ${Red}NOT${Rst} match!\n"
fi
printf "==> To release as ${Gre}$NextTag${Rst}, adjust comment and run below one-liner:\n"
printf "\n    TAG=${Gre}$NextTag${Rst} && git add . && git commit -m \"${Yel}<insert comment>${Rst}\" && git tag \$TAG && git push origin \$TAG && git push\n\n"

exit 0
