#!/usr/bin/env bash
# build

set -euo pipefail  # Fail immediately on any error
Gre='\e[1;32m' Red='\e[1;31m' Mag='\e[1;35m' Yel='\e[1;33m' Blu='\e[1;34m' Rst='\e[0m'

Prg=`head -1 go.mod | awk -F'/' '{print $NF}' | awk '{print $NF}'`
case "$OSTYPE" in
    "linux-gnu"* ) printf "==> Linux\n" && BIN=$GOPATH/bin/${Prg} ;;
    "darwin"* )    printf "==> macOS\n" && BIN=$GOPATH/bin/${Prg} ;;
    "msys"* )      printf "==> Windows with GitBASH\n" && BIN=$GOPATH/bin/${Prg}.exe ;;
    * )            printf "==> Unknown OS '$OSTYPE'. Aborting.\n" && exit 1 ;;
esac

printf "==> Update go.mod to reflect actual dependencies\ngo mod tidy\n"
go mod tidy
printf "\n==> Format Go code according to standard rules\ngo fmt ./...\n"
go fmt ./...
printf "\n==> Run tests for all packages in the repository\ngo test ./...\n"
go test ./...
printf "\n==> Install static analysis tool for Go\ngo install honnef.co/go/tools/cmd/staticcheck@latest\n"
go install honnef.co/go/tools/cmd/staticcheck@latest
printf "\n==> Analyze Go code for potential issues\nstaticcheck ./...\n"
staticcheck ./...

printf "\n==> Compile maz package\ngo build -o /dev/null ./pkg/maz\n"
#go build pkg/maz/...
go build -o /dev/null ./pkg/maz


printf "\n==> Build ${Yel}$BIN${Rst}\ngo build -ldflags \"-s -w\" -o $BIN\n"
MainGo=cmd/azm/main.go
go build -ldflags "-s -w" -o $BIN $MainGo

# Example options to cross-compile to other OSes/archs:
# GOOS=darwin  GOARCH=arm64       go build -ldflags "-s -w" -o ${Prg}
# GOOS=windows GOARCH=amd64|arm64 go build -ldflags "-s -w" -o ${Prg}.exe
# GOOS=linux   GOARCH=amd64|arm64 go build -ldflags "-s -w" -o ${Prg}

printf "\n"
ls -l $GOPATH/bin/$Prg | grep $Prg

printf "\n==> Warn on any 'replace' in go.mod\n${Red}$(grep replace go.mod)${Rst}\n"
printf "\n==> grep version in $MainGo\n${Gre}$(grep 'prgver.*=' $MainGo || grep 'program_version.*=' $MainGo)${Rst}\n"
printf "\n==> Last 5 tags\n"
git tag | sort -V | tail -5
CurrentTag=`git tag | sort -V | tail -1`
printf "\n==> To ${Gre}release${Rst}, advance below Tag version, then run below one-liner:\n"
printf "\n    Tag=$CurrentTag && git add . && git commit -m \"x updates\" && git tag \$Tag && git push origin \$Tag && git push\n\n"

exit 0
